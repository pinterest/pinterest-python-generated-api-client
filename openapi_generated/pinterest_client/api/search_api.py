"""
    Pinterest REST API

    Pinterest's REST API  # noqa: E501

    The version of the OpenAPI document: 5.8.0
    Contact: pinterest-api@pinterest.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_generated.pinterest_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_generated.pinterest_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_generated.pinterest_client.model.error import Error
from openapi_generated.pinterest_client.model.paginated import Paginated


class SearchApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.search_user_boards_get_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [
                    'pinterest_oauth2'
                ],
                'endpoint_path': '/search/boards',
                'operation_id': 'search_user_boards_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'username',
                    'bookmark',
                    'query',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'username',
                ]
            },
            root_map={
                'validations': {
                    ('username',): {

                        'regex': {
                            'pattern': r'(?!^\d+$)^.+$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'username':
                        (str,),
                    'bookmark':
                        (str,),
                    'query':
                        (str,),
                },
                'attribute_map': {
                    'username': 'username',
                    'bookmark': 'bookmark',
                    'query': 'query',
                },
                'location_map': {
                    'username': 'query',
                    'bookmark': 'query',
                    'query': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.search_user_pins_list_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [
                    'pinterest_oauth2'
                ],
                'endpoint_path': '/search/pins',
                'operation_id': 'search_user_pins_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'query',
                    'board',
                    'topic_based',
                    'richtype',
                    'rs',
                    'bookmark',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'richtype',
                ],
                'validation': [
                    'board',
                    'rs',
                ]
            },
            root_map={
                'validations': {
                    ('board',): {

                        'regex': {
                            'pattern': r'^\d+$',  # noqa: E501
                        },
                    },
                    ('rs',): {

                        'regex': {
                            'pattern': r'(?!^\d+$)^.+$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                    ('richtype',): {

                        "APP": "app",
                        "ARTICLE": "article",
                        "INSTANT_CONTENT": "instant_content",
                        "MOVIE": "movie",
                        "PLACE": "place",
                        "PRODUCT": "product",
                        "RECIPE": "recipe",
                        "TUTORIAL": "tutorial",
                        "TV_SERIES": "tv_series"
                    },
                },
                'openapi_types': {
                    'query':
                        (str,),
                    'board':
                        (str,),
                    'topic_based':
                        (bool,),
                    'richtype':
                        (str,),
                    'rs':
                        (str,),
                    'bookmark':
                        (str,),
                },
                'attribute_map': {
                    'query': 'query',
                    'board': 'board',
                    'topic_based': 'topic_based',
                    'richtype': 'richtype',
                    'rs': 'rs',
                    'bookmark': 'bookmark',
                },
                'location_map': {
                    'query': 'query',
                    'board': 'query',
                    'topic_based': 'query',
                    'richtype': 'query',
                    'rs': 'query',
                    'bookmark': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def search_user_boards_get(
        self,
        **kwargs
    ):
        """Search user's boards  # noqa: E501

        Search for a given query within the boards of a specific user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_user_boards_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            username (str): Name of the user to be looked up.. [optional] if omitted the server will use the default value of "me"
            bookmark (str): Cursor used to fetch the next page of items. [optional]
            query (str): Search query. Can contain pin description keywords or comma-separated pin IDs.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.search_user_boards_get_endpoint.call_with_http_info(**kwargs)

    def search_user_pins_list(
        self,
        **kwargs
    ):
        """Search user's Pins  # noqa: E501

        Request to get a list of user pins matching your search query.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_user_pins_list(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            query (str): Search query. Can contain pin description keywords or comma-separated pin IDs.. [optional]
            board (str): Board ID.. [optional]
            topic_based (bool): Use topic-based search? If true, pass topic as 'query' param.. [optional] if omitted the server will use the default value of False
            richtype (str): Rich type filter.. [optional]
            rs (str): Referring source.. [optional]
            bookmark (str): Cursor used to fetch the next page of items. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.search_user_pins_list_endpoint.call_with_http_info(**kwargs)

