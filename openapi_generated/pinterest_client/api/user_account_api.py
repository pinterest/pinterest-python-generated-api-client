"""
    Pinterest REST API

    Pinterest's REST API  # noqa: E501

    The version of the OpenAPI document: 5.8.0
    Contact: pinterest-api@pinterest.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_generated.pinterest_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_generated.pinterest_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_generated.pinterest_client.model.account import Account
from openapi_generated.pinterest_client.model.analytics_response import AnalyticsResponse
from openapi_generated.pinterest_client.model.error import Error
from openapi_generated.pinterest_client.model.follow_user_request import FollowUserRequest
from openapi_generated.pinterest_client.model.linked_business import LinkedBusiness
from openapi_generated.pinterest_client.model.paginated import Paginated
from openapi_generated.pinterest_client.model.top_pins_analytics_response import TopPinsAnalyticsResponse
from openapi_generated.pinterest_client.model.top_video_pins_analytics_response import TopVideoPinsAnalyticsResponse
from openapi_generated.pinterest_client.model.user_following_feed_type import UserFollowingFeedType
from openapi_generated.pinterest_client.model.user_summary import UserSummary
from openapi_generated.pinterest_client.model.user_website_summary import UserWebsiteSummary
from openapi_generated.pinterest_client.model.user_website_verification_code import UserWebsiteVerificationCode
from openapi_generated.pinterest_client.model.user_website_verify_request import UserWebsiteVerifyRequest


class UserAccountApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.boards_user_follows_list_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [
                    'pinterest_oauth2'
                ],
                'endpoint_path': '/user_account/following/boards',
                'operation_id': 'boards_user_follows_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'bookmark',
                    'explicit_following',
                    'ad_account_id',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'ad_account_id',
                ]
            },
            root_map={
                'validations': {
                    ('ad_account_id',): {
                        'max_length': 18,
                        'regex': {
                            'pattern': r'^\d+$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'bookmark':
                        (str,),
                    'explicit_following':
                        (bool,),
                    'ad_account_id':
                        (str,),
                },
                'attribute_map': {
                    'bookmark': 'bookmark',
                    'explicit_following': 'explicit_following',
                    'ad_account_id': 'ad_account_id',
                },
                'location_map': {
                    'bookmark': 'query',
                    'explicit_following': 'query',
                    'ad_account_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.follow_user_update_endpoint = _Endpoint(
            settings={
                'response_type': (UserSummary,),
                'auth': [
                    'pinterest_oauth2'
                ],
                'endpoint_path': '/user_account/following/{username}',
                'operation_id': 'follow_user_update',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'username',
                    'follow_user_request',
                ],
                'required': [
                    'username',
                    'follow_user_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'username',
                ]
            },
            root_map={
                'validations': {
                    ('username',): {

                        'regex': {
                            'pattern': r'(?!^\d+$)^.+$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'username':
                        (str,),
                    'follow_user_request':
                        (FollowUserRequest,),
                },
                'attribute_map': {
                    'username': 'username',
                },
                'location_map': {
                    'username': 'path',
                    'follow_user_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.followers_list_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [
                    'pinterest_oauth2'
                ],
                'endpoint_path': '/user_account/followers',
                'operation_id': 'followers_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'bookmark',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'bookmark':
                        (str,),
                },
                'attribute_map': {
                    'bookmark': 'bookmark',
                },
                'location_map': {
                    'bookmark': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.linked_business_accounts_get_endpoint = _Endpoint(
            settings={
                'response_type': ([LinkedBusiness],),
                'auth': [
                    'pinterest_oauth2'
                ],
                'endpoint_path': '/user_account/businesses',
                'operation_id': 'linked_business_accounts_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.unverify_website_delete_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'pinterest_oauth2'
                ],
                'endpoint_path': '/user_account/websites',
                'operation_id': 'unverify_website_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'website',
                ],
                'required': [
                    'website',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'website':
                        (str,),
                },
                'attribute_map': {
                    'website': 'website',
                },
                'location_map': {
                    'website': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.user_account_analytics_endpoint = _Endpoint(
            settings={
                'response_type': (AnalyticsResponse,),
                'auth': [
                    'pinterest_oauth2'
                ],
                'endpoint_path': '/user_account/analytics',
                'operation_id': 'user_account_analytics',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'start_date',
                    'end_date',
                    'from_claimed_content',
                    'pin_format',
                    'app_types',
                    'metric_types',
                    'split_field',
                    'ad_account_id',
                ],
                'required': [
                    'start_date',
                    'end_date',
                ],
                'nullable': [
                ],
                'enum': [
                    'from_claimed_content',
                    'pin_format',
                    'app_types',
                    'metric_types',
                    'split_field',
                ],
                'validation': [
                    'ad_account_id',
                ]
            },
            root_map={
                'validations': {
                    ('ad_account_id',): {
                        'max_length': 18,
                        'regex': {
                            'pattern': r'^\d+$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                    ('from_claimed_content',): {

                        "OTHER": "OTHER",
                        "CLAIMED": "CLAIMED",
                        "BOTH": "BOTH"
                    },
                    ('pin_format',): {

                        "ALL": "ALL",
                        "PRODUCT": "PRODUCT",
                        "REGULAR": "REGULAR",
                        "VIDEO": "VIDEO"
                    },
                    ('app_types',): {

                        "ALL": "ALL",
                        "MOBILE": "MOBILE",
                        "TABLET": "TABLET",
                        "WEB": "WEB"
                    },
                    ('metric_types',): {

                        "ENGAGEMENT": "ENGAGEMENT",
                        "ENGAGEMENT_RATE": "ENGAGEMENT_RATE",
                        "IMPRESSION": "IMPRESSION",
                        "OUTBOUND_CLICK": "OUTBOUND_CLICK",
                        "OUTBOUND_CLICK_RATE": "OUTBOUND_CLICK_RATE",
                        "PIN_CLICK": "PIN_CLICK",
                        "PIN_CLICK_RATE": "PIN_CLICK_RATE",
                        "SAVE": "SAVE",
                        "SAVE_RATE": "SAVE_RATE"
                    },
                    ('split_field',): {

                        "NO_SPLIT": "NO_SPLIT",
                        "APP_TYPE": "APP_TYPE",
                        "OWNED_CONTENT": "OWNED_CONTENT",
                        "PIN_FORMAT": "PIN_FORMAT"
                    },
                },
                'openapi_types': {
                    'start_date':
                        (date,),
                    'end_date':
                        (date,),
                    'from_claimed_content':
                        (str,),
                    'pin_format':
                        (str,),
                    'app_types':
                        (str,),
                    'metric_types':
                        ([str],),
                    'split_field':
                        (str,),
                    'ad_account_id':
                        (str,),
                },
                'attribute_map': {
                    'start_date': 'start_date',
                    'end_date': 'end_date',
                    'from_claimed_content': 'from_claimed_content',
                    'pin_format': 'pin_format',
                    'app_types': 'app_types',
                    'metric_types': 'metric_types',
                    'split_field': 'split_field',
                    'ad_account_id': 'ad_account_id',
                },
                'location_map': {
                    'start_date': 'query',
                    'end_date': 'query',
                    'from_claimed_content': 'query',
                    'pin_format': 'query',
                    'app_types': 'query',
                    'metric_types': 'query',
                    'split_field': 'query',
                    'ad_account_id': 'query',
                },
                'collection_format_map': {
                    'metric_types': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.user_account_analytics_top_pins_endpoint = _Endpoint(
            settings={
                'response_type': (TopPinsAnalyticsResponse,),
                'auth': [
                    'pinterest_oauth2'
                ],
                'endpoint_path': '/user_account/analytics/top_pins',
                'operation_id': 'user_account_analytics_top_pins',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'start_date',
                    'end_date',
                    'sort_by',
                    'from_claimed_content',
                    'pin_format',
                    'app_types',
                    'metric_types',
                    'num_of_pins',
                    'created_in_last_n_days',
                    'ad_account_id',
                ],
                'required': [
                    'start_date',
                    'end_date',
                    'sort_by',
                ],
                'nullable': [
                ],
                'enum': [
                    'sort_by',
                    'from_claimed_content',
                    'pin_format',
                    'app_types',
                    'metric_types',
                    'created_in_last_n_days',
                ],
                'validation': [
                    'num_of_pins',
                    'ad_account_id',
                ]
            },
            root_map={
                'validations': {
                    ('num_of_pins',): {

                        'inclusive_maximum': 50,
                        'inclusive_minimum': 1,
                    },
                    ('ad_account_id',): {
                        'max_length': 18,
                        'regex': {
                            'pattern': r'^\d+$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                    ('sort_by',): {

                        "ENGAGEMENT": "ENGAGEMENT",
                        "IMPRESSION": "IMPRESSION",
                        "OUTBOUND_CLICK": "OUTBOUND_CLICK",
                        "PIN_CLICK": "PIN_CLICK",
                        "SAVE": "SAVE"
                    },
                    ('from_claimed_content',): {

                        "OTHER": "OTHER",
                        "CLAIMED": "CLAIMED",
                        "BOTH": "BOTH"
                    },
                    ('pin_format',): {

                        "ALL": "ALL",
                        "PRODUCT": "PRODUCT",
                        "REGULAR": "REGULAR",
                        "VIDEO": "VIDEO"
                    },
                    ('app_types',): {

                        "ALL": "ALL",
                        "MOBILE": "MOBILE",
                        "TABLET": "TABLET",
                        "WEB": "WEB"
                    },
                    ('metric_types',): {

                        "ENGAGEMENT": "ENGAGEMENT",
                        "ENGAGEMENT_RATE": "ENGAGEMENT_RATE",
                        "IMPRESSION": "IMPRESSION",
                        "OUTBOUND_CLICK": "OUTBOUND_CLICK",
                        "OUTBOUND_CLICK_RATE": "OUTBOUND_CLICK_RATE",
                        "PIN_CLICK": "PIN_CLICK",
                        "PIN_CLICK_RATE": "PIN_CLICK_RATE",
                        "SAVE": "SAVE",
                        "SAVE_RATE": "SAVE_RATE"
                    },
                    ('created_in_last_n_days',): {

                        "30": 30
                    },
                },
                'openapi_types': {
                    'start_date':
                        (date,),
                    'end_date':
                        (date,),
                    'sort_by':
                        (str,),
                    'from_claimed_content':
                        (str,),
                    'pin_format':
                        (str,),
                    'app_types':
                        (str,),
                    'metric_types':
                        ([str],),
                    'num_of_pins':
                        (int,),
                    'created_in_last_n_days':
                        (int,),
                    'ad_account_id':
                        (str,),
                },
                'attribute_map': {
                    'start_date': 'start_date',
                    'end_date': 'end_date',
                    'sort_by': 'sort_by',
                    'from_claimed_content': 'from_claimed_content',
                    'pin_format': 'pin_format',
                    'app_types': 'app_types',
                    'metric_types': 'metric_types',
                    'num_of_pins': 'num_of_pins',
                    'created_in_last_n_days': 'created_in_last_n_days',
                    'ad_account_id': 'ad_account_id',
                },
                'location_map': {
                    'start_date': 'query',
                    'end_date': 'query',
                    'sort_by': 'query',
                    'from_claimed_content': 'query',
                    'pin_format': 'query',
                    'app_types': 'query',
                    'metric_types': 'query',
                    'num_of_pins': 'query',
                    'created_in_last_n_days': 'query',
                    'ad_account_id': 'query',
                },
                'collection_format_map': {
                    'metric_types': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.user_account_analytics_top_video_pins_endpoint = _Endpoint(
            settings={
                'response_type': (TopVideoPinsAnalyticsResponse,),
                'auth': [
                    'pinterest_oauth2'
                ],
                'endpoint_path': '/user_account/analytics/top_video_pins',
                'operation_id': 'user_account_analytics_top_video_pins',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'start_date',
                    'end_date',
                    'sort_by',
                    'from_claimed_content',
                    'pin_format',
                    'app_types',
                    'metric_types',
                    'num_of_pins',
                    'created_in_last_n_days',
                    'ad_account_id',
                ],
                'required': [
                    'start_date',
                    'end_date',
                    'sort_by',
                ],
                'nullable': [
                ],
                'enum': [
                    'sort_by',
                    'from_claimed_content',
                    'pin_format',
                    'app_types',
                    'metric_types',
                    'created_in_last_n_days',
                ],
                'validation': [
                    'num_of_pins',
                    'ad_account_id',
                ]
            },
            root_map={
                'validations': {
                    ('num_of_pins',): {

                        'inclusive_maximum': 50,
                        'inclusive_minimum': 1,
                    },
                    ('ad_account_id',): {
                        'max_length': 18,
                        'regex': {
                            'pattern': r'^\d+$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                    ('sort_by',): {

                        "IMPRESSION": "IMPRESSION",
                        "SAVE": "SAVE",
                        "OUTBOUND_CLICK": "OUTBOUND_CLICK",
                        "VIDEO_MRC_VIEW": "VIDEO_MRC_VIEW",
                        "VIDEO_AVG_WATCH_TIME": "VIDEO_AVG_WATCH_TIME",
                        "VIDEO_V50_WATCH_TIME": "VIDEO_V50_WATCH_TIME",
                        "QUARTILE_95_PERCENT_VIEW": "QUARTILE_95_PERCENT_VIEW",
                        "VIDEO_10S_VIEW": "VIDEO_10S_VIEW",
                        "VIDEO_START": "VIDEO_START"
                    },
                    ('from_claimed_content',): {

                        "OTHER": "OTHER",
                        "CLAIMED": "CLAIMED",
                        "BOTH": "BOTH"
                    },
                    ('pin_format',): {

                        "ALL": "ALL",
                        "PRODUCT": "PRODUCT",
                        "REGULAR": "REGULAR",
                        "VIDEO": "VIDEO"
                    },
                    ('app_types',): {

                        "ALL": "ALL",
                        "MOBILE": "MOBILE",
                        "TABLET": "TABLET",
                        "WEB": "WEB"
                    },
                    ('metric_types',): {

                        "IMPRESSION": "IMPRESSION",
                        "SAVE": "SAVE",
                        "VIDEO_MRC_VIEW": "VIDEO_MRC_VIEW",
                        "VIDEO_AVG_WATCH_TIME": "VIDEO_AVG_WATCH_TIME",
                        "VIDEO_V50_WATCH_TIME": "VIDEO_V50_WATCH_TIME",
                        "QUARTILE_95_PERCENT_VIEW": "QUARTILE_95_PERCENT_VIEW",
                        "VIDEO_10S_VIEW": "VIDEO_10S_VIEW",
                        "VIDEO_START": "VIDEO_START",
                        "OUTBOUND_CLICK": "OUTBOUND_CLICK"
                    },
                    ('created_in_last_n_days',): {

                        "30": 30
                    },
                },
                'openapi_types': {
                    'start_date':
                        (date,),
                    'end_date':
                        (date,),
                    'sort_by':
                        (str,),
                    'from_claimed_content':
                        (str,),
                    'pin_format':
                        (str,),
                    'app_types':
                        (str,),
                    'metric_types':
                        ([str],),
                    'num_of_pins':
                        (int,),
                    'created_in_last_n_days':
                        (int,),
                    'ad_account_id':
                        (str,),
                },
                'attribute_map': {
                    'start_date': 'start_date',
                    'end_date': 'end_date',
                    'sort_by': 'sort_by',
                    'from_claimed_content': 'from_claimed_content',
                    'pin_format': 'pin_format',
                    'app_types': 'app_types',
                    'metric_types': 'metric_types',
                    'num_of_pins': 'num_of_pins',
                    'created_in_last_n_days': 'created_in_last_n_days',
                    'ad_account_id': 'ad_account_id',
                },
                'location_map': {
                    'start_date': 'query',
                    'end_date': 'query',
                    'sort_by': 'query',
                    'from_claimed_content': 'query',
                    'pin_format': 'query',
                    'app_types': 'query',
                    'metric_types': 'query',
                    'num_of_pins': 'query',
                    'created_in_last_n_days': 'query',
                    'ad_account_id': 'query',
                },
                'collection_format_map': {
                    'metric_types': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.user_account_get_endpoint = _Endpoint(
            settings={
                'response_type': (Account,),
                'auth': [
                    'pinterest_oauth2'
                ],
                'endpoint_path': '/user_account',
                'operation_id': 'user_account_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'ad_account_id',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'ad_account_id',
                ]
            },
            root_map={
                'validations': {
                    ('ad_account_id',): {
                        'max_length': 18,
                        'regex': {
                            'pattern': r'^\d+$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'ad_account_id':
                        (str,),
                },
                'attribute_map': {
                    'ad_account_id': 'ad_account_id',
                },
                'location_map': {
                    'ad_account_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.user_following_get_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [
                    'pinterest_oauth2'
                ],
                'endpoint_path': '/user_account/following',
                'operation_id': 'user_following_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'bookmark',
                    'feed_type',
                    'explicit_following',
                    'ad_account_id',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'ad_account_id',
                ]
            },
            root_map={
                'validations': {
                    ('ad_account_id',): {
                        'max_length': 18,
                        'regex': {
                            'pattern': r'^\d+$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'bookmark':
                        (str,),
                    'feed_type':
                        (UserFollowingFeedType,),
                    'explicit_following':
                        (bool,),
                    'ad_account_id':
                        (str,),
                },
                'attribute_map': {
                    'bookmark': 'bookmark',
                    'feed_type': 'feed_type',
                    'explicit_following': 'explicit_following',
                    'ad_account_id': 'ad_account_id',
                },
                'location_map': {
                    'bookmark': 'query',
                    'feed_type': 'query',
                    'explicit_following': 'query',
                    'ad_account_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.user_websites_get_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [
                    'pinterest_oauth2'
                ],
                'endpoint_path': '/user_account/websites',
                'operation_id': 'user_websites_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'bookmark',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'bookmark':
                        (str,),
                },
                'attribute_map': {
                    'bookmark': 'bookmark',
                },
                'location_map': {
                    'bookmark': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.verify_website_update_endpoint = _Endpoint(
            settings={
                'response_type': (UserWebsiteSummary,),
                'auth': [
                    'pinterest_oauth2'
                ],
                'endpoint_path': '/user_account/websites',
                'operation_id': 'verify_website_update',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'user_website_verify_request',
                ],
                'required': [
                    'user_website_verify_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'user_website_verify_request':
                        (UserWebsiteVerifyRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'user_website_verify_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.website_verification_get_endpoint = _Endpoint(
            settings={
                'response_type': (UserWebsiteVerificationCode,),
                'auth': [
                    'pinterest_oauth2'
                ],
                'endpoint_path': '/user_account/websites/verification',
                'operation_id': 'website_verification_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def boards_user_follows_list(
        self,
        **kwargs
    ):
        """List following boards  # noqa: E501

        Get a list of the boards a user follows. The request returns a board summary object array.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.boards_user_follows_list(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            bookmark (str): Cursor used to fetch the next page of items. [optional]
            explicit_following (bool): Whether or not to include implicit user follows, which means followees with board follows. When explicit_following is True, it means we only want explicit user follows.. [optional] if omitted the server will use the default value of False
            ad_account_id (str): Unique identifier of an ad account.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.boards_user_follows_list_endpoint.call_with_http_info(**kwargs)

    def follow_user_update(
        self,
        username,
        follow_user_request,
        **kwargs
    ):
        """Follow user  # noqa: E501

        <strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/new/about-beta-access/'>Learn more</a>.</strong>  Use this request, as a signed-in user, to follow another user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.follow_user_update(username, follow_user_request, async_req=True)
        >>> result = thread.get()

        Args:
            username (str): A valid username
            follow_user_request (FollowUserRequest): Follow a user.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            UserSummary
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['username'] = \
            username
        kwargs['follow_user_request'] = \
            follow_user_request
        return self.follow_user_update_endpoint.call_with_http_info(**kwargs)

    def followers_list(
        self,
        **kwargs
    ):
        """List followers  # noqa: E501

        Get a list of your followers, or a specific user's followers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.followers_list(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            bookmark (str): Cursor used to fetch the next page of items. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.followers_list_endpoint.call_with_http_info(**kwargs)

    def linked_business_accounts_get(
        self,
        **kwargs
    ):
        """List linked businesses  # noqa: E501

        Get a list of your linked business accounts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.linked_business_accounts_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [LinkedBusiness]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.linked_business_accounts_get_endpoint.call_with_http_info(**kwargs)

    def unverify_website_delete(
        self,
        website,
        **kwargs
    ):
        """Unverify website  # noqa: E501

        Unverifu a website verified by the signed-in user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.unverify_website_delete(website, async_req=True)
        >>> result = thread.get()

        Args:
            website (str): Website with path or domain only

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['website'] = \
            website
        return self.unverify_website_delete_endpoint.call_with_http_info(**kwargs)

    def user_account_analytics(
        self,
        start_date,
        end_date,
        **kwargs
    ):
        """Get user account analytics  # noqa: E501

        Get analytics for the \"operation user_account\" - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\".  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.user_account_analytics(start_date, end_date, async_req=True)
        >>> result = thread.get()

        Args:
            start_date (date): Metric report start date (UTC). Format: YYYY-MM-DD
            end_date (date): Metric report end date (UTC). Format: YYYY-MM-DD

        Keyword Args:
            from_claimed_content (str): Filter on Pins that match your claimed domain.. [optional] if omitted the server will use the default value of "BOTH"
            pin_format (str): Pin formats to get data for, default is all.. [optional] if omitted the server will use the default value of "ALL"
            app_types (str): Apps or devices to get data for, default is all.. [optional] if omitted the server will use the default value of "ALL"
            metric_types ([str]): Metric types to get data for, default is all. . [optional]
            split_field (str): How to split the data into groups. Not including this param means data won't be split.. [optional] if omitted the server will use the default value of "NO_SPLIT"
            ad_account_id (str): Unique identifier of an ad account.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            AnalyticsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['start_date'] = \
            start_date
        kwargs['end_date'] = \
            end_date
        return self.user_account_analytics_endpoint.call_with_http_info(**kwargs)

    def user_account_analytics_top_pins(
        self,
        start_date,
        end_date,
        sort_by,
        **kwargs
    ):
        """Get user account top pins analytics  # noqa: E501

        Gets analytics data about a user's top pins (limited to the top 50). - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\".  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.user_account_analytics_top_pins(start_date, end_date, sort_by, async_req=True)
        >>> result = thread.get()

        Args:
            start_date (date): Metric report start date (UTC). Format: YYYY-MM-DD
            end_date (date): Metric report end date (UTC). Format: YYYY-MM-DD
            sort_by (str): Specify sorting order for metrics

        Keyword Args:
            from_claimed_content (str): Filter on Pins that match your claimed domain.. [optional] if omitted the server will use the default value of "BOTH"
            pin_format (str): Pin formats to get data for, default is all.. [optional] if omitted the server will use the default value of "ALL"
            app_types (str): Apps or devices to get data for, default is all.. [optional] if omitted the server will use the default value of "ALL"
            metric_types ([str]): Metric types to get data for, default is all. . [optional]
            num_of_pins (int): Number of pins to include, default is 10. Max is 50.. [optional] if omitted the server will use the default value of 10
            created_in_last_n_days (int): Get metrics for pins created in the last \"n\" days.. [optional] if omitted the server will use the default value of 30
            ad_account_id (str): Unique identifier of an ad account.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            TopPinsAnalyticsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['start_date'] = \
            start_date
        kwargs['end_date'] = \
            end_date
        kwargs['sort_by'] = \
            sort_by
        return self.user_account_analytics_top_pins_endpoint.call_with_http_info(**kwargs)

    def user_account_analytics_top_video_pins(
        self,
        start_date,
        end_date,
        sort_by,
        **kwargs
    ):
        """Get user account top video pins analytics  # noqa: E501

        Gets analytics data about a user's top video pins (limited to the top 50). - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\".  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.user_account_analytics_top_video_pins(start_date, end_date, sort_by, async_req=True)
        >>> result = thread.get()

        Args:
            start_date (date): Metric report start date (UTC). Format: YYYY-MM-DD
            end_date (date): Metric report end date (UTC). Format: YYYY-MM-DD
            sort_by (str): Specify sorting order for video metrics

        Keyword Args:
            from_claimed_content (str): Filter on Pins that match your claimed domain.. [optional] if omitted the server will use the default value of "BOTH"
            pin_format (str): Pin formats to get data for, default is all.. [optional] if omitted the server will use the default value of "ALL"
            app_types (str): Apps or devices to get data for, default is all.. [optional] if omitted the server will use the default value of "ALL"
            metric_types ([str]): Metric types to get video data for, default is all. . [optional]
            num_of_pins (int): Number of pins to include, default is 10. Max is 50.. [optional] if omitted the server will use the default value of 10
            created_in_last_n_days (int): Get metrics for pins created in the last \"n\" days.. [optional] if omitted the server will use the default value of 30
            ad_account_id (str): Unique identifier of an ad account.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            TopVideoPinsAnalyticsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['start_date'] = \
            start_date
        kwargs['end_date'] = \
            end_date
        kwargs['sort_by'] = \
            sort_by
        return self.user_account_analytics_top_video_pins_endpoint.call_with_http_info(**kwargs)

    def user_account_get(
        self,
        **kwargs
    ):
        """Get user account  # noqa: E501

        Get account information for the \"operation user_account\" - By default, the \"operation user_account\" is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". See <a href='/docs/reference/business-access/'>Understanding Business Access</a> for more information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.user_account_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            ad_account_id (str): Unique identifier of an ad account.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Account
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.user_account_get_endpoint.call_with_http_info(**kwargs)

    def user_following_get(
        self,
        **kwargs
    ):
        """List following  # noqa: E501

        Get a list of who a certain user follows.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.user_following_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            bookmark (str): Cursor used to fetch the next page of items. [optional]
            feed_type (UserFollowingFeedType): Thrift param specifying what type of followees will be kept. Default to include all followees.. [optional]
            explicit_following (bool): Whether or not to include implicit user follows, which means followees with board follows. When explicit_following is True, it means we only want explicit user follows.. [optional] if omitted the server will use the default value of False
            ad_account_id (str): Unique identifier of an ad account.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.user_following_get_endpoint.call_with_http_info(**kwargs)

    def user_websites_get(
        self,
        **kwargs
    ):
        """Get user websites  # noqa: E501

        Get user websites, claimed or not  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.user_websites_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            bookmark (str): Cursor used to fetch the next page of items. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.user_websites_get_endpoint.call_with_http_info(**kwargs)

    def verify_website_update(
        self,
        user_website_verify_request,
        **kwargs
    ):
        """Verify website  # noqa: E501

        Verify a website as a signed-in user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.verify_website_update(user_website_verify_request, async_req=True)
        >>> result = thread.get()

        Args:
            user_website_verify_request (UserWebsiteVerifyRequest): Verify a website.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            UserWebsiteSummary
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['user_website_verify_request'] = \
            user_website_verify_request
        return self.verify_website_update_endpoint.call_with_http_info(**kwargs)

    def website_verification_get(
        self,
        **kwargs
    ):
        """Get user verification code for website claiming  # noqa: E501

        Get verification code for user to install on the website to claim it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.website_verification_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            UserWebsiteVerificationCode
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.website_verification_get_endpoint.call_with_http_info(**kwargs)

